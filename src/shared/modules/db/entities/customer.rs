//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::Sex;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "public", table_name = "Customer")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_name = "userId", column_type = "Text", unique)]
    pub user_id: String,
    #[sea_orm(column_name = "firstName", column_type = "Text")]
    pub first_name: String,
    #[sea_orm(column_name = "lastName", column_type = "Text")]
    pub last_name: String,
    #[sea_orm(column_type = "Text", unique)]
    pub email: String,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub phone: Option<String>,
    pub birthdate: DateTimeWithTimeZone,
    pub sex: Sex,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::expense::Entity")]
    Expense,
    #[sea_orm(has_many = "super::regular_payment::Entity")]
    RegularPayment,
}

impl Related<super::expense::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Expense.def()
    }
}

impl Related<super::regular_payment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RegularPayment.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
